name: Static code check

on:
  pull_request:

jobs:
  cppcheck:
    name: cppcheck
    runs-on: "ubuntu-18.04"
    strategy:
      matrix:
        base-image-template: ["gcr.io/stadia-open-source/amdvlk_%s%s_%s:nightly"]
        config:              [Release]
        assertions:          ["OFF"]
        feature-set:         ["+clang"]
    steps:
      - name: Setup environment
        run: |
          sudo apt-get install -yqq snapd
          sudo snap install cppcheck
      - name: Checkout LLPC
        run: |
          git clone https://github.com/${GITHUB_REPOSITORY}.git .
          git fetch origin +${GITHUB_SHA}:${GITHUB_REF} --update-head-ok
          git checkout ${GITHUB_SHA}
      - name: Generate Docker base image tag string
        run: |
          CONFIG_LOWER=$(echo "${{ matrix.config }}" | tr "[:upper:]" "[:lower:]")
          FEATURES_LOWER=$(echo "${{ matrix.feature-set }}" | tr "+" "_")
          ASSERTS_LOWER=$(echo "${{ matrix.assertions }}" | tr "[:upper:]" "[:lower:]")
          TAG=$(printf "${{ matrix.base-image-template }}" "$CONFIG_LOWER" "$FEATURES_LOWER" "$ASSERTS_LOWER")
          echo "IMAGE_TAG: $TAG"
          echo "::set-env name=IMAGE_TAG::$TAG"
      - name: Fetch the latest prebuilt AMDVLK
        run: docker pull "$IMAGE_TAG"
      - name: Fetch sources and regenerate compilation database with Docker
        run: docker build . --file docker/cppcheck.Dockerfile
                            --build-arg AMDVLK_IMAGE="$IMAGE_TAG"
                            --build-arg LLPC_REPO_NAME="${GITHUB_REPOSITORY}"
                            --build-arg LLPC_REPO_REF="${GITHUB_REF}"
                            --build-arg LLPC_REPO_SHA="${GITHUB_SHA}"
                            --tag amdvlk-cppcheck
      - name: Extract sources from the docker image
        run: |
            sudo mkdir -p /vulkandriver
            docker run -v /vulkandriver:/host -i amdvlk-cppcheck /bin/sh -c "cp -r /vulkandriver/* /host/"
            ls /vulkandriver
      - name: Run cppcheck
        run: cppcheck -q -j$(( $(nproc) * 4 )) --error-exitcode=1 --project=/vulkandriver/compile_commands.json
